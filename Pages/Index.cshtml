@page
@model CRUDApp.Pages.Products.IndexModel
@{
    ViewData["Title"] = "Product Management";
}
@using System.Text.Json

<div class="container py-5">
    <!-- Header -->
    <header class="mb-4">
        <div class="row">
            <div class="col-md-6">
                <h2 class="fw-bold text-dark mb-4">Product Management</h2>
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">
                    <i class="fas fa-plus"></i> Add New Product
                </button>
            </div>
        </div>
    </header>

    <!-- Alerts -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Search and Filter Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search products...">
                        <button class="btn btn-outline-secondary" type="button" onclick="searchProducts()">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
                <div class="col-md-3">
                    <select id="priceFilter" class="form-select" onchange="filterProducts()">
                        <option value="">Price Range</option>
                        <option value="0-50">$0 - $50</option>
                        <option value="51-100">$51 - $100</option>
                        <option value="101-200">$101 - $200</option>
                        <option value="201+">$201+</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="stockFilter" class="form-select" onchange="filterProducts()">
                        <option value="">Stock Status</option>
                        <option value="in">In Stock</option>
                        <option value="low">Low Stock (≤ 10)</option>
                        <option value="out">Out of Stock</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-4" id="productsContainer">
        @foreach (var item in Model.Products)
        {
            <div class="col product-card" 
                 data-name="@item.ProductName.ToLower()" 
                 data-price="@item.Price" 
                 data-stock="@item.Quantity">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="card-title mb-0">@item.ProductName</h5>
                            <span class="badge bg-primary">ID: @item.ProductID</span>
                        </div>
                        <div class="mb-2">
                            <strong class="text-primary h5">@item.Price.ToString("C2")</strong>
                        </div>
                        <div class="mb-3">
                            @if (item.Quantity > 10)
                            {
                                <span class="badge bg-success">In Stock (@item.Quantity)</span>
                            }
                            else if (item.Quantity > 0)
                            {
                                <span class="badge bg-warning">Low Stock (@item.Quantity)</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Out of Stock</span>
                            }
                        </div>
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-outline-primary btn-sm" onclick="editProduct(@JsonSerializer.Serialize(item))">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <form method="post" asp-page-handler="Delete" class="d-inline">
                                <input type="hidden" name="id" value="@item.ProductID" />
                                <button type="submit" class="btn btn-outline-danger btn-sm" onclick="return confirm('Are you sure you want to delete this product?')">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Add New Product</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" asp-page-handler="Create">
                <div class="modal-body">
                    <div class="mb-3">
                        <label asp-for="Product.ProductName" class="form-label">Product Name</label>
                        <input asp-for="Product.ProductName" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label asp-for="Product.Price" class="form-label">Price ($)</label>
                        <input asp-for="Product.Price" type="number" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label asp-for="Product.Quantity" class="form-label">Quantity in Stock</label>
                        <input asp-for="Product.Quantity" type="number" class="form-control" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Product</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Product Modal -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Edit Product</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" asp-page-handler="Edit">
                <div class="modal-body">
                    <input type="hidden" id="editProductId" asp-for="Product.ProductID" />
                    <div class="mb-3">
                        <label asp-for="Product.ProductName" class="form-label">Product Name</label>
                        <input id="editProductName" asp-for="Product.ProductName" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label asp-for="Product.Price" class="form-label">Price ($)</label>
                        <input id="editPrice" asp-for="Product.Price" type="number" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label asp-for="Product.Quantity" class="form-label">Quantity in Stock</label>
                        <input id="editQuantity" asp-for="Product.Quantity" type="number" class="form-control" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        .card {
            transition: transform 0.2s ease-in-out;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .product-card {
            opacity: 1;
            transition: opacity 0.3s ease-in-out;
        }
        .product-card.hidden {
            display: none;
        }
    </style>
}

@section Scripts {
    <script>
       window.editProduct = function(product) {
                console.log('Product data received:', product);
                
                try {
                    // Get modal element
                    const modalElement = document.getElementById('editModal');
                    
                    // Set form values
                    document.getElementById('editProductId').value = product.ProductID;
                    document.getElementById('editProductName').value = product.ProductName;
                    document.getElementById('editPrice').value = product.Price;
                    document.getElementById('editQuantity').value = product.Quantity;
                    
                    // Show modal
                    const modal = new bootstrap.Modal(modalElement);
                    modal.show();
                    
                } catch (error) {
                    console.error('Error in editProduct function:', error);
                    console.error('Received product:', product);
                }
            };

        function searchProducts() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            filterAndSearchProducts(searchTerm);
        }

        function filterProducts() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            filterAndSearchProducts(searchTerm);
        }

        function filterAndSearchProducts(searchTerm) {
            const priceFilter = document.getElementById('priceFilter').value;
            const stockFilter = document.getElementById('stockFilter').value;
            const products = document.getElementsByClassName('product-card');

            Array.from(products).forEach(product => {
                const name = product.dataset.name;
                const price = parseFloat(product.dataset.price);
                const stock = parseInt(product.dataset.stock);
                let show = true;

                // Search filter
                if (searchTerm && !name.includes(searchTerm)) {
                    show = false;
                }

                // Price filter
                if (priceFilter) {
                    const [min, max] = priceFilter.split('-').map(v => v === '+' ? Infinity : parseInt(v));
                    if (price < min || (max !== Infinity && price > max)) {
                        show = false;
                    }
                }

                // Stock filter
                if (stockFilter) {
                    switch (stockFilter) {
                        case 'in':
                            if (stock <= 0) show = false;
                            break;
                        case 'low':
                            if (stock > 10 || stock <= 0) show = false;
                            break;
                        case 'out':
                            if (stock > 0) show = false;
                            break;
                    }
                }

                product.classList.toggle('hidden', !show);
            });
        }

        // Add event listener for search input
        document.getElementById('searchInput').addEventListener('input', function() {
            searchProducts();
        });
    </script>
}